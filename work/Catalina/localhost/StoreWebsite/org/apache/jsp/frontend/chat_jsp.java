/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2025-08-04 09:48:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.frontend;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Chat v·ªõi Admin</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        #chat-button {\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            bottom: 20px;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("            width: 60px;\r\n");
      out.write("            height: 60px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            z-index: 1000;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #chat-button #unread-count {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 5px;\r\n");
      out.write("            right: 5px;\r\n");
      out.write("            background-color: red;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            padding: 2px 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #chat-box {\r\n");
      out.write("            display: none;\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            bottom: 90px;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("            width: 320px;\r\n");
      out.write("            height: 400px;\r\n");
      out.write("            background: white;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            box-shadow: 0 0 10px rgba(0,0,0,0.2);\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            z-index: 1000;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            opacity: 0; /* B·∫Øt ƒë·∫ßu v·ªõi ƒë·ªô m·ªù 0 */\r\n");
      out.write("            transition: opacity 0.3s ease-in-out; /* Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªïi m·ªù */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #messages {\r\n");
      out.write("            height: 320px;\r\n");
      out.write("            overflow-y: auto;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .message {\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("            margin: 5px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            max-width: 80%;\r\n");
      out.write("            clear: both;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .own {\r\n");
      out.write("            background-color: #dcf8c6;\r\n");
      out.write("            float: right;\r\n");
      out.write("            text-align: right;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .other {\r\n");
      out.write("            background-color: #f1f0f0;\r\n");
      out.write("            float: left;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<button id=\"chat-button\" onclick=\"toggleChat()\">\r\n");
      out.write("    üí¨\r\n");
      out.write("    <span id=\"unread-count\">0</span>\r\n");
      out.write("</button>\r\n");
      out.write("\r\n");
      out.write("<div id=\"chat-box\">\r\n");
      out.write("    <div id=\"messages\"></div>\r\n");
      out.write("    <input type=\"text\" id=\"msgInput\" placeholder=\"Nh·∫≠p tin...\" style=\"width: 80%;\">\r\n");
      out.write("    <button onclick=\"sendMessage()\">G·ª≠i</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const sender = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loggedCustomer.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"; // G√°n ID ng∆∞·ªùi d√πng\r\n");
      out.write("    const receiver = \"admin\"; // G√°n ID ng∆∞·ªùi nh·∫≠n\r\n");
      out.write("    const socket = new WebSocket(\"ws://localhost:9999/StoreWebsite/chat/\" + sender);\r\n");
      out.write("\r\n");
      out.write("    let unreadCount = 0;\r\n");
      out.write("\r\n");
      out.write("    // H√†m toggle chat: m·ªü/ƒë√≥ng khung chat\r\n");
      out.write("    function toggleChat() {\r\n");
      out.write("        const chatBox = document.getElementById(\"chat-box\");\r\n");
      out.write("        if (chatBox.style.display === \"none\" || chatBox.style.display === \"\") {\r\n");
      out.write("            // M·ªü khung chat\r\n");
      out.write("            chatBox.style.display = \"block\";\r\n");
      out.write("            setTimeout(() => { chatBox.style.opacity = 1; }, 10);  // Fade in (khi m·ªü)\r\n");
      out.write("\r\n");
      out.write("            // L·∫•y l·ªãch s·ª≠ chat khi m·ªü\r\n");
      out.write("            fetch(\"/StoreWebsite/loadChat?user1=\" + sender + \"&user2=\" + receiver)\r\n");
      out.write("                .then(res => res.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    document.getElementById(\"messages\").innerHTML = \"\"; // X√≥a tin nh·∫Øn c≈©\r\n");
      out.write("                    data.forEach(msg => {\r\n");
      out.write("                        displayMessage(msg);\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("            // Reset s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc khi m·ªü chat\r\n");
      out.write("            unreadCount = 0;\r\n");
      out.write("            updateUnreadCount();\r\n");
      out.write("        } else {\r\n");
      out.write("            // T·∫Øt khung chat\r\n");
      out.write("            chatBox.style.opacity = 0;\r\n");
      out.write("            setTimeout(() => { chatBox.style.display = \"none\"; }, 300);  // Fade out (khi ƒë√≥ng)\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Nh·∫≠n tin nh·∫Øn qua WebSocket\r\n");
      out.write("    socket.onmessage = function (event) {\r\n");
      out.write("        const msg = JSON.parse(event.data);\r\n");
      out.write("        // Ch·ªâ hi·ªÉn th·ªã n·∫øu tin nh·∫Øn thu·ªôc v·ªÅ c·∫∑p ƒëang chat\r\n");
      out.write("        if ((msg.sender === sender && msg.receiver === receiver) ||\r\n");
      out.write("            (msg.sender === receiver && msg.receiver === sender)) {\r\n");
      out.write("            displayMessage(msg);\r\n");
      out.write("\r\n");
      out.write("            // N·∫øu khung chat ƒëang ƒë√≥ng, tƒÉng s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc\r\n");
      out.write("            if (document.getElementById(\"chat-box\").style.display === \"none\") {\r\n");
      out.write("                unreadCount++;\r\n");
      out.write("                updateUnreadCount();\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc tr√™n n√∫t chat\r\n");
      out.write("    function updateUnreadCount() {\r\n");
      out.write("        const unreadCountElement = document.getElementById(\"unread-count\");\r\n");
      out.write("        unreadCountElement.innerText = unreadCount;\r\n");
      out.write("        unreadCountElement.style.display = unreadCount > 0 ? \"inline-block\" : \"none\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // G·ª≠i tin nh·∫Øn qua WebSocket\r\n");
      out.write("    function sendMessage() {\r\n");
      out.write("        const input = document.getElementById(\"msgInput\");\r\n");
      out.write("        const content = input.value.trim();\r\n");
      out.write("        if (!content) return;\r\n");
      out.write("        const msg = { sender, receiver, content };\r\n");
      out.write("        socket.send(JSON.stringify(msg));\r\n");
      out.write("        input.value = \"\";  // X√≥a input sau khi g·ª≠i\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Hi·ªÉn th·ªã tin nh·∫Øn trong khung chat\r\n");
      out.write("    function displayMessage(msg) {\r\n");
      out.write("        const div = document.createElement(\"div\");\r\n");
      out.write("        div.className = \"message \" + (msg.sender === sender ? \"own\" : \"other\");\r\n");
      out.write("        div.innerText = msg.content;\r\n");
      out.write("        document.getElementById(\"messages\").appendChild(div);\r\n");
      out.write("        document.getElementById(\"messages\").scrollTop = document.getElementById(\"messages\").scrollHeight;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // NgƒÉn vi·ªác xu·ªëng d√≤ng khi nh·∫•n Enter trong input\r\n");
      out.write("    document.getElementById(\"msgInput\").addEventListener(\"keydown\", function(event) {\r\n");
      out.write("        if (event.key === \"Enter\") {\r\n");
      out.write("            event.preventDefault(); // NgƒÉn vi·ªác xu·ªëng d√≤ng\r\n");
      out.write("            sendMessage();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
