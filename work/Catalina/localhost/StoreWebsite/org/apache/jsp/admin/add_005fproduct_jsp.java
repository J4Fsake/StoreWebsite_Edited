/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2025-08-04 09:52:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class add_005fproduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1308849601000L));
    _jspx_dependants.put("jar:file:/C:/Users/n21dc/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153359882000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n");
      out.write("<title>Add Product To Import</title>\r\n");
      out.write("\r\n");
      out.write("<body class=\"body\">\r\n");
      out.write("<div id=\"productModal\" class=\"modal\" style=\"display: none;\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("        <div class=\"modal-header\">\r\n");
      out.write("            <h1 class=\"Heading-H1\">Add Product</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-wrapper is_add_form w-form\">\r\n");
      out.write("            <form id=\"addProductForm\" method=\"get\" class=\"form\" action=\"#\">\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"productSelect\" class=\"field-label\">Product</label>\r\n");
      out.write("                    <select id=\"productSelect\" name=\"productSelect\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a product...</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Hidden product ID for internal logic -->\r\n");
      out.write("                <input type=\"hidden\" id=\"productId\" name=\"productId\" />\r\n");
      out.write("\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"colorSelect\" class=\"field-label\">Color</label>\r\n");
      out.write("                    <select id=\"colorSelect\" name=\"colorSelect\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a color...</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"sizeSelect\" class=\"field-label\">Size</label>\r\n");
      out.write("                    <select id=\"sizeSelect\" name=\"sizeSelect\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a size...</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"fields-wrapper is_contain_combobox\">\r\n");
      out.write("                    <label for=\"materialSelect\" class=\"field-label\">Material</label>\r\n");
      out.write("                    <select id=\"materialSelect\" name=\"materialSelect\" class=\"combobox w-select\">\r\n");
      out.write("                        <option value=\"\">Select a material...</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"fields-wrapper\">\r\n");
      out.write("                    <label for=\"quantity\" class=\"field-label\">Quantity</label>\r\n");
      out.write("                    <input class=\"text-field is-form_add_product w-input\" name=\"quantity\" type=\"text\" id=\"quantity\" />\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"fields-wrapper\">\r\n");
      out.write("                    <label for=\"price\" class=\"field-label\">Price</label>\r\n");
      out.write("                    <input class=\"text-field is-form_add_product w-input\" name=\"price\" type=\"text\" id=\"price\" />\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Buttons -->\r\n");
      out.write("        <div class=\"form_button\">\r\n");
      out.write("            <a href=\"#\" class=\"button is-medium-button w-button\" id=\"addProductBtn\">Add</a>\r\n");
      out.write("            <a href=\"#\" class=\"button is-medium-button is-red w-button close\" onclick=\"document.getElementById('productModal').style.display='none'\">Cancel</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const productSelect = document.getElementById(\"productSelect\");\r\n");
      out.write("    const productIdField = document.getElementById(\"productId\");\r\n");
      out.write("    const colorSelect = document.getElementById(\"colorSelect\");\r\n");
      out.write("    const sizeSelect = document.getElementById(\"sizeSelect\");\r\n");
      out.write("    const materialSelect = document.getElementById(\"materialSelect\");\r\n");
      out.write("    const quantityField = document.getElementById(\"quantity\");\r\n");
      out.write("    const priceField = document.getElementById(\"price\");\r\n");
      out.write("    let counter = 1;\r\n");
      out.write("\r\n");
      out.write("    // When 'Add' button is clicked\r\n");
      out.write("    function addProductToTable() {\r\n");
      out.write("        let productId = productIdField.value;\r\n");
      out.write("        let productName = productSelect.options[productSelect.selectedIndex].text;\r\n");
      out.write("        let colorId = colorSelect.value;\r\n");
      out.write("        let colorName = colorSelect.options[colorSelect.selectedIndex].text;\r\n");
      out.write("        let sizeId = sizeSelect.value;\r\n");
      out.write("        let sizeName = sizeSelect.options[sizeSelect.selectedIndex].text;\r\n");
      out.write("        let materialId = materialSelect.value;\r\n");
      out.write("        let materialName = materialSelect.options[materialSelect.selectedIndex].text;\r\n");
      out.write("        let quantity = quantityField.value;\r\n");
      out.write("        let price = priceField.value;\r\n");
      out.write("\r\n");
      out.write("        const total = (quantity * price).toString();\r\n");
      out.write("\r\n");
      out.write("        // Check if product already exists in the table\r\n");
      out.write("        let table = document.getElementById(\"result\");\r\n");
      out.write("        let rows = table.getElementsByTagName(\"tr\");\r\n");
      out.write("        let found = false;\r\n");
      out.write("\r\n");
      out.write("        // Loop through the table rows to find the matching product ID\r\n");
      out.write("        for (let i = 0; i < rows.length; i++) {\r\n");
      out.write("            let cells = rows[i].getElementsByTagName(\"td\");\r\n");
      out.write("            if (cells.length > 0 && cells[1].textContent === productId && cells[3].textContent === colorName && cells[4].textContent === sizeName && cells[5].textContent === materialName) { // Check if productId matches\r\n");
      out.write("                // Update the existing row with new quantity, price, and total\r\n");
      out.write("                let existingQuantity = parseInt(cells[6].textContent);  // Existing quantity\r\n");
      out.write("                let existingPrice = parseFloat(cells[7].textContent);  // Existing price\r\n");
      out.write("                let newQuantity = existingQuantity + parseInt(quantity); // Add the new quantity to existing one\r\n");
      out.write("                let newTotal = newQuantity * price; // Recalculate total using the old price\r\n");
      out.write("                let oldTotal = existingPrice * existingQuantity;\r\n");
      out.write("\r\n");
      out.write("                cells[6].textContent = newQuantity;  // Update quantity\r\n");
      out.write("                cells[7].textContent = price;\r\n");
      out.write("                cells[8].textContent = newTotal.toFixed(2);  // Update total\r\n");
      out.write("\r\n");
      out.write("                // Update the total price field\r\n");
      out.write("                updateTotalPrice((newTotal - oldTotal).toFixed(2));\r\n");
      out.write("\r\n");
      out.write("                found = true; // Product found and updated\r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // If the product wasn't found, create a new row\r\n");
      out.write("        if (!found) {\r\n");
      out.write("            let parent = document.createElement('tr');\r\n");
      out.write("            parent.classList.add('table_row');\r\n");
      out.write("\r\n");
      out.write("            let indexCol = document.createElement('td');\r\n");
      out.write("            indexCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let IDCol = document.createElement('td');\r\n");
      out.write("            IDCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let nameCol = document.createElement('td');\r\n");
      out.write("            nameCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let colorCol = document.createElement('td');\r\n");
      out.write("            colorCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let sizeCol = document.createElement('td');\r\n");
      out.write("            sizeCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let materialCol = document.createElement('td');\r\n");
      out.write("            materialCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let quanCol = document.createElement('td');\r\n");
      out.write("            quanCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let priceCol = document.createElement('td');\r\n");
      out.write("            priceCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("            let totalCol = document.createElement('td');\r\n");
      out.write("            totalCol.classList.add('table_cell', 'align-middle', 'text-center');\r\n");
      out.write("\r\n");
      out.write("            indexCol.textContent = counter.toString();\r\n");
      out.write("            IDCol.textContent = productId;\r\n");
      out.write("            nameCol.textContent = productName;\r\n");
      out.write("            colorCol.textContent = colorName;\r\n");
      out.write("            colorCol.setAttribute(\"data-id\", colorId);\r\n");
      out.write("            sizeCol.textContent = sizeName;\r\n");
      out.write("            sizeCol.setAttribute(\"data-id\", sizeId);\r\n");
      out.write("            materialCol.textContent = materialName;\r\n");
      out.write("            materialCol.setAttribute(\"data-id\", materialId);\r\n");
      out.write("            quanCol.textContent = quantity;\r\n");
      out.write("            priceCol.textContent = price;\r\n");
      out.write("            totalCol.textContent = total;\r\n");
      out.write("\r\n");
      out.write("            parent.appendChild(indexCol);\r\n");
      out.write("            parent.appendChild(IDCol);\r\n");
      out.write("            parent.appendChild(nameCol);\r\n");
      out.write("            parent.appendChild(colorCol);\r\n");
      out.write("            parent.appendChild(sizeCol);\r\n");
      out.write("            parent.appendChild(materialCol);\r\n");
      out.write("            parent.appendChild(quanCol);\r\n");
      out.write("            parent.appendChild(priceCol);\r\n");
      out.write("            parent.appendChild(totalCol);\r\n");
      out.write("\r\n");
      out.write("            document.getElementById('result').appendChild(parent);\r\n");
      out.write("\r\n");
      out.write("            updateTotalPrice(total);\r\n");
      out.write("            counter++;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Close modal\r\n");
      out.write("        document.getElementById(\"productModal\").style.display = \"none\";\r\n");
      out.write("\r\n");
      out.write("        // Clear modal fields for next input\r\n");
      out.write("        productSelect.value = \"\";\r\n");
      out.write("        colorSelect.value = \"\";\r\n");
      out.write("        sizeSelect.value = \"\";\r\n");
      out.write("        materialSelect.value = \"\";\r\n");
      out.write("        productIdField.value = \"\";\r\n");
      out.write("        quantityField.value = \"\";\r\n");
      out.write("        priceField.value = \"\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Function to update total price\r\n");
      out.write("    function updateTotalPrice(newTotal) {\r\n");
      out.write("        const totalPriceField = document.getElementById(\"totalPriceField\");\r\n");
      out.write("        let currentTotal = parseFloat(totalPriceField.value) || 0;\r\n");
      out.write("        currentTotal += parseFloat(newTotal);\r\n");
      out.write("        totalPriceField.value = currentTotal.toFixed(2);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function loadAllProducts() {\r\n");
      out.write("        $.get(\"/StoreWebsite/api/all_product\", function (data) {\r\n");
      out.write("            const select = $(\"#productSelect\");\r\n");
      out.write("            select.empty().append($('<option>', {\r\n");
      out.write("                value: \"\",\r\n");
      out.write("                text: \"Select a product...\"\r\n");
      out.write("            }));\r\n");
      out.write("\r\n");
      out.write("            data.forEach(p => {\r\n");
      out.write("                if (p && p.id && p.name) {\r\n");
      out.write("                    const option = $('<option>', {\r\n");
      out.write("                        value: p.id,\r\n");
      out.write("                        text: p.name\r\n");
      out.write("                    });\r\n");
      out.write("                    select.append(option);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateSelect(selector, list, label) {\r\n");
      out.write("        const select = $(selector);\r\n");
      out.write("        const currentValue = select.val();\r\n");
      out.write("\r\n");
      out.write("        select.empty().append($('<option>', {\r\n");
      out.write("            value: \"\",\r\n");
      out.write("            text: \"Select a \" + label + \" ...\"\r\n");
      out.write("        }));\r\n");
      out.write("\r\n");
      out.write("        let found = false;\r\n");
      out.write("        list.forEach(p => {\r\n");
      out.write("            if (p && p.id && p.value) {\r\n");
      out.write("                const option = $('<option>', {\r\n");
      out.write("                    value: p.id,\r\n");
      out.write("                    text: p.value\r\n");
      out.write("                });\r\n");
      out.write("                if (p.id == currentValue) found = true;\r\n");
      out.write("                select.append(option);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Náº¿u giÃ¡ trá» cÅ© váº«n tá»n táº¡i thÃ¬ giá»¯ láº¡i\r\n");
      out.write("        if (found) {\r\n");
      out.write("            select.val(currentValue);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function onVariantFiltersChange() {\r\n");
      out.write("        const productId = $(\"#productSelect\").val();\r\n");
      out.write("        const colorId = $(\"#colorSelect\").val();\r\n");
      out.write("        const sizeId = $(\"#sizeSelect\").val();\r\n");
      out.write("        const materialId = $(\"#materialSelect\").val();\r\n");
      out.write("\r\n");
      out.write("        $.get(\"/StoreWebsite/api/import_options\", {\r\n");
      out.write("            productId, sizeId, colorId, materialId\r\n");
      out.write("        }, function (data) {\r\n");
      out.write("            updateSelect(\"#colorSelect\", data.colors, \"color\");\r\n");
      out.write("            updateSelect(\"#sizeSelect\", data.sizes, \"size\");\r\n");
      out.write("            updateSelect(\"#materialSelect\", data.materials, \"material\");\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("    $(document).ready(function () {\r\n");
      out.write("        loadAllProducts();\r\n");
      out.write("\r\n");
      out.write("        $(\"#productSelect, #sizeSelect, #colorSelect, #materialSelect\").on(\"change\", onVariantFiltersChange);\r\n");
      out.write("\r\n");
      out.write("        $(\"#productSelect\").change(function() {\r\n");
      out.write("            const selectedProductId = $(this).val();\r\n");
      out.write("            $(\"#productId\").val(selectedProductId);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        document.getElementById(\"addProductBtn\").addEventListener(\"click\", function (event){\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            let color = document.getElementById(\"colorSelect\").options[\r\n");
      out.write("                document.getElementById(\"colorSelect\").selectedIndex\r\n");
      out.write("                ].text;\r\n");
      out.write("            let size = document.getElementById(\"sizeSelect\").options[\r\n");
      out.write("                document.getElementById(\"sizeSelect\").selectedIndex\r\n");
      out.write("                ].text;\r\n");
      out.write("            let material = document.getElementById(\"materialSelect\").options[\r\n");
      out.write("                document.getElementById(\"materialSelect\").selectedIndex\r\n");
      out.write("                ].text;\r\n");
      out.write("            let productId = $(\"#productId\").val();\r\n");
      out.write("            let quantity = $(\"#quantity\").val();\r\n");
      out.write("            let price = $(\"#price\").val();\r\n");
      out.write("            const specialCharRegex = /[^a-zA-Z0-9\\s]/;\r\n");
      out.write("            const onlyNumbersRegex = /^[0-9]+$/;\r\n");
      out.write("\r\n");
      out.write("            if(!productId){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_PRODUCT_ID\", event);\r\n");
      out.write("                $(\"#productSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(color === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_SIZE\", event);\r\n");
      out.write("                $(\"#sizeSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(size === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_SIZE\", event);\r\n");
      out.write("                $(\"#sizeSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(material === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_SIZE\", event);\r\n");
      out.write("                $(\"#sizeSelect\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(quantity.trim() === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(specialCharRegex.test(quantity)){\r\n");
      out.write("                getMessageContent(\"NO_ITALIC-CHARACTER_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if (!onlyNumbersRegex.test(quantity)) {\r\n");
      out.write("                getMessageContent(\"ONLY_NUMBER_IMPORT_QUANTITY\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(Number(quantity) <= 0){\r\n");
      out.write("                getMessageContent(\"IMPORT_QUANTITY_MUST_BE_POSITIVE\", event);\r\n");
      out.write("                $(\"#quantity\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(price.trim() === \"\"){\r\n");
      out.write("                getMessageContent(\"NOT_NULL_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(specialCharRegex.test(price)){\r\n");
      out.write("                getMessageContent(\"NO_ITALIC-CHARACTER_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if (!onlyNumbersRegex.test(price)) {\r\n");
      out.write("                getMessageContent(\"ONLY_NUMBER_IMPORT_PRICE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            else if(Number(price) <= 0){\r\n");
      out.write("                getMessageContent(\"IMPORT_PRICE_MUST_BE_POSITIVE\", event);\r\n");
      out.write("                $(\"#price\").focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            addProductToTable();\r\n");
      out.write("\r\n");
      out.write("            this.submit();\r\n");
      out.write("        });\r\n");
      out.write("        $(\"#addProductForm\").validate({\r\n");
      out.write("            rules:{\r\n");
      out.write("                productId: \"required\",\r\n");
      out.write("                color: \"required\",\r\n");
      out.write("                size: \"required\",\r\n");
      out.write("                material: \"required\",\r\n");
      out.write("                quantity: \"required\",\r\n");
      out.write("                price: \"required\"\r\n");
      out.write("            },\r\n");
      out.write("            messages:{\r\n");
      out.write("                color: \"\",\r\n");
      out.write("                size: \"\",\r\n");
      out.write("                material: \"\",\r\n");
      out.write("                productId: \"\",\r\n");
      out.write("                quantity: \"\",\r\n");
      out.write("                price: \"\"\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
